// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// set.go
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _setGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdf\x6f\xdb\x38\x12\x7e\xb6\xfe\x8a\x49\x80\x2b\xa4\xab\x4f\x09\xf2\x58\x9c\x0b\x38\xfd\x71\x28\xd0\xde\xc3\x25\xf7\x94\x0d\x16\xb4\x34\xb4\x09\x53\xa4\x4a\x52\x76\x55\x6f\xfe\xf7\xc5\x90\x92\x2c\x5b\x96\x93\xee\x76\xb1\x6f\x36\xc5\x19\xce\x7c\xf3\xf1\x9b\x61\xc9\xb2\x35\x5b\x22\x30\x53\x68\x53\x47\x91\x28\x4a\x6d\x1c\xc4\xd1\xe4\x92\x17\xee\x32\x4a\xa2\xe8\xea\x0a\xfe\x83\x0a\x8d\xc8\xee\xd0\x81\x28\x4a\x89\x05\x2a\x67\xc1\xad\x10\x2c\x3a\xc8\x99\x63\x60\x9d\xa9\x32\x57\x19\xdc\xef\xc0\x1c\xb6\xc2\xad\x80\x41\xc1\xca\x14\xee\xc3\x76\xf2\xb7\x62\x16\x98\x02\x5d\x3a\xa1\x15\x93\x90\xb1\x92\x65\xc2\xd5\x29\xdc\xd6\x90\x23\x67\x95\x74\x53\x70\x2b\x61\xe9\x13\x08\xeb\xcf\x71\x1a\xbe\xa3\xd1\x29\xdc\xa1\x73\x42\x2d\x81\x45\x57\x57\xa5\xb6\xc2\x89\x0d\xfa\x8d\x5b\x21\xc9\x59\x65\x11\xac\x90\xa8\x1c\x70\x26\x64\x65\xd0\xc2\x76\x85\x0a\x37\x68\xc0\x99\x9a\x6c\x9d\x06\x96\xe7\x80\x5d\x32\xda\xbb\x03\x5e\x49\x49\xa7\xa5\x91\xab\x4b\xec\x67\x1e\x32\x84\x5d\x34\xd9\x30\x69\x29\xa7\x87\xe6\xeb\xe3\x42\x6b\x19\x4d\x28\x02\x10\xca\x45\x4f\x1e\xb4\xff\xe2\xb6\x67\x9d\x19\x64\x0e\x2d\x30\x50\xb8\xf5\xe9\x68\xde\x7a\x87\x0d\x93\x15\xda\x34\xe2\x95\xca\x0e\xed\x62\x7f\x56\x9a\xa6\xcd\x52\x02\xff\xec\x39\xdd\x45\x13\x0b\x6f\x66\xbd\x28\x77\xb4\xff\xcd\x20\xb8\xdd\xd3\x53\x34\xe1\xda\xc0\xaf\x53\xd8\x90\x85\x61\x6a\x89\xe0\x9d\xef\xa2\xc9\xc4\xa6\xf4\xf3\x61\xf3\x08\x33\x70\xa6\xc2\x68\xf2\x14\x4d\x0c\xba\xca\x28\x78\x65\x29\x21\x1f\x5a\x6c\xfb\xc7\x27\x70\xe7\x8c\x50\xcb\x38\x21\x6c\x08\xd4\x5d\x67\xc4\x0b\x97\xde\x95\x46\x28\xc7\xe3\xcb\x7f\x6c\x2e\xa7\x60\xd3\x0f\xaa\x2a\xd0\x30\x87\x71\x92\x34\x18\xbd\xd3\xca\x31\xa1\x2c\x64\x2b\xcc\xd6\x16\x04\xf7\xac\x2a\x8d\xde\x88\x1c\xf3\x00\x0c\xd5\x5f\xa8\x96\x6e\xe9\xe9\x50\x5a\x4f\x04\x18\x74\x60\x51\xee\xbd\xa8\xda\x34\x99\x7c\x6c\x02\xf8\x64\xef\xaa\x05\x55\xe3\x30\x00\x5a\x11\x54\x2c\x1b\xbe\x6a\x0e\x0b\x10\x53\x9c\x02\x71\xa8\x6e\x69\x43\xeb\xed\x76\x4b\xee\x88\xb0\x21\x10\xcc\x29\xe6\xc5\x48\xb4\xed\xb1\xf1\x02\xfa\xcb\x6d\xb8\x82\x83\x44\x15\x87\x70\x13\x78\xeb\xff\x2d\x9a\x7f\x54\xaf\x16\x65\x26\xad\xaf\x55\x28\xee\x7a\x5f\xd9\x60\xea\xf7\x0a\x0e\x17\xc1\xf6\x61\xfd\xe8\x57\x8e\xcc\xa9\xd6\xe4\xa2\x59\xf5\xf5\x6f\xd1\xf9\x50\x94\xae\x6e\xc1\xe9\x65\x9b\x6b\xb4\xa0\xb4\x6b\xd3\x05\xa6\x3a\x54\xec\x68\xd2\xde\x5b\x3c\x28\x4b\x3f\xd7\xd9\x0c\xae\x9b\xd3\x3f\xa3\x82\xb0\x23\x68\x8d\xaa\x8a\x05\x1a\x8a\xa2\xbb\xb5\xcf\xd2\xe2\x33\xaa\x38\xa1\x4b\x79\xfa\xb8\x96\x86\xac\x3c\x38\xa9\xd5\xa3\x5e\xc6\x63\xb4\x63\xe5\xc0\xbf\x4d\x33\x56\x36\x9e\xef\xd0\x91\x73\x8b\x6e\xdc\x33\x7c\xe2\x5e\x16\x96\xcc\x0b\x99\x50\x0e\x97\x68\x88\x4b\x25\xb3\x16\x73\x52\x42\x54\xe4\xed\xc0\xc3\x5e\x15\xaf\x53\x98\x1f\x78\xbe\x06\xa1\x72\x91\x79\xc1\x51\x7a\x2f\xaf\x23\xb7\xd8\xc7\x18\x67\x74\xf2\x40\x5f\x04\x87\x0c\xfe\x0d\xd7\x9e\x38\x19\x50\x75\x3c\x59\x7c\x92\x30\x83\x6c\x9f\x76\x93\x72\x77\xcd\x3b\x48\x19\x58\x29\x32\x6c\x73\x3e\x51\x3d\x70\x2b\xe6\x20\x63\x0a\x16\x08\x95\x0d\x97\x27\xe8\xb1\x36\x24\x7f\x0d\xad\xa5\xd6\x65\x0a\xef\xb1\x44\x95\x93\xe0\x68\x05\x5b\xb2\x24\x37\xbe\x0d\x09\x0b\x0b\xa4\x2f\xde\x09\xd7\x66\x4a\x0c\xb5\x22\x47\x43\xde\x2a\xeb\xb5\x7f\x85\xf0\x85\x95\x53\xf8\x28\xa4\x43\x33\x05\xa6\x72\xf8\xa8\x65\x0e\x05\xba\x95\xce\x29\x32\xeb\x90\xe5\xc0\x7c\xd5\x6a\x60\x99\xa3\xb3\xdc\xbe\x85\x09\x67\x51\xf2\x11\x44\x7b\x4a\x07\x0f\x8f\xad\xca\xef\xa2\xc9\x1a\x6b\x2f\xd8\x05\x5b\x63\xdc\x7d\x99\xf6\x29\x99\x44\x13\x41\x5b\xae\xcf\xdd\x69\xf2\xf3\x20\x48\xad\xd7\x74\xc3\x5f\xbf\xee\x0b\x36\x7d\x6c\x6a\x31\xcf\x73\x6a\x73\x76\xa0\xaa\x44\x9b\x3e\xff\xda\x3a\xf8\xce\x2c\x0d\xb2\xbc\x06\x83\x2c\x5b\x61\x4e\x7e\x5a\x06\x05\x2a\xfa\xdd\x2c\xcf\x05\xb5\xef\xa6\xd3\xca\xda\xf7\xda\xb1\xbb\x3f\xcf\xf3\x43\x65\x1e\xd2\x2c\x30\xea\x2d\x5c\xc3\xab\x57\xc7\x92\x10\xbe\xf5\x94\xcf\xb6\x2c\xec\x04\xbd\xeb\x5c\x47\x74\xfc\x1f\x16\x7a\x83\x90\xa3\x44\xba\x0e\xc3\xf6\x62\x81\x1b\x5d\x0c\xd0\xe8\x5a\x0f\xa9\x5c\x60\x2a\xb9\xb3\xe8\x3a\x10\xa8\x2f\xf9\x8e\xae\xff\xa5\xcb\x91\xc4\xc3\xf1\x67\x73\x0f\xa1\x35\xe9\x4e\xe9\xe0\x64\x90\xc5\x3b\x89\xcc\x80\xf1\xce\xa8\x42\x72\x7f\x8b\x0e\xa3\xbf\xa7\xa8\xf6\xea\xec\xcd\x1a\xd9\x38\x23\x01\xde\x7d\x3c\x88\x6c\x9c\x80\x47\x31\xaf\x93\x3e\x01\x3b\x25\xf8\x5a\xd1\xfe\x91\xde\xde\xf4\x58\xa4\x4d\x81\x8e\x41\xd1\xfc\x7c\x67\x61\xee\x6f\xe5\x2d\x30\xe3\x71\x0f\xdb\x04\x87\xf9\x71\x63\xbe\x6d\x36\x1e\x2d\xcf\xc7\xee\xa6\x0f\x2a\xb6\x37\x2f\xe9\xbc\x17\xb3\xf0\xf7\xe6\x6c\xef\xed\x74\xbf\x6b\xeb\xf6\xa6\x6d\x2d\x5f\x58\x09\xac\x2c\xa5\x38\xe6\x1e\x05\xe7\xef\x8f\xd3\x47\x43\x45\xaf\xa9\xc1\x2d\x86\x71\x76\xcf\x3e\x28\x2a\x4b\x62\x24\xeb\xae\xf7\x56\x4a\x7c\xad\xf6\xba\x3a\x0d\xe6\xe2\x3b\xf6\x3b\x76\xc1\xa8\x8f\x53\x1d\xc9\x11\xe3\x0e\x8d\x0f\xac\x6e\x15\xd1\x19\xa6\x2c\xd7\xa6\x60\x3e\xac\x36\xbe\x11\x18\xbf\xb0\x32\xe6\x7e\x53\xdc\xf1\x7a\x8c\xe0\xba\x72\x44\xa2\xc3\xc1\x36\x49\x9b\xbe\xe3\xef\x76\x72\x8e\x6c\xba\x72\xe1\x9e\xf3\x78\x9d\x9c\x1a\x51\x75\xd5\x0e\xdd\x41\xd1\xff\x0c\xe2\xf7\x01\x69\x83\xb6\x92\xfe\x95\xe1\xa7\xc3\x76\x4e\xf5\xb8\x1f\x34\xb1\xa6\x73\xf9\x7e\x43\x1f\x7a\xa7\x04\x3f\xdd\x50\x35\x82\x64\x08\x79\x00\x26\x31\xf2\xa7\x23\x29\x38\x10\x86\x61\x0a\xec\x60\x5d\xef\x31\x0d\xb3\xe0\x09\x5c\xa9\x3b\x1a\xcc\xab\x0c\xf7\x0f\x3f\x7a\x33\x01\x75\x54\xd9\xca\xe5\xa2\x06\x5b\x65\x19\x5a\x2b\x36\x28\xeb\x43\x82\xb5\x85\x08\xcf\xac\x5e\x2d\x5a\x28\x7b\x6c\x5d\xe0\x52\x28\x45\x96\xfe\x09\x49\xcb\x0b\x66\x31\xbc\x22\x75\x49\xcd\x55\x68\x3f\x13\x95\x68\x88\xb4\x61\x64\x38\x5d\x6f\x7f\x63\x16\x08\xcc\x5a\x9d\x89\x30\x65\x91\x66\x64\xba\x28\x2a\x15\x9e\x8f\xa1\x5a\xcb\x8a\x19\xa6\x1c\x22\x30\xc8\xd1\xa1\x29\x84\x12\xd6\x89\xac\xe1\xc3\x58\x09\xb5\xcc\x63\x8a\x0f\xba\x8e\x7e\x58\xce\x29\x0c\x2f\x49\x6f\x2c\x18\x2f\x98\x77\x3a\x03\xee\xbd\x1f\xeb\x2c\xad\x35\xf5\xf9\xbf\xa2\x44\xfb\x33\x6c\xe5\x57\x3c\xa4\xcd\xa4\xd8\x21\xd9\x97\xe0\x80\xe8\x7e\xf3\x56\x37\x3a\xb3\x57\x60\x6a\x28\xc8\xfd\x93\x66\x51\xbf\x89\xae\xae\x26\xf3\xc6\xe0\x16\x66\xb0\xfb\x06\xbf\x41\xfc\x8d\xd0\x9f\x27\xa0\x4d\xf3\xfb\x36\x79\x3a\x8d\x95\x8f\xf4\x58\x7e\x5f\x44\xf3\xb3\xaf\x9c\x53\x64\x3e\xf5\x2e\xba\x79\xde\x64\x40\xfe\x4f\xca\xa1\xb1\x98\xb9\x03\x80\x45\xbb\xfa\x72\x9c\xfd\xe0\x78\x6c\xb6\xd5\xcf\xc3\xdd\x19\x9d\x80\x9c\xac\x9e\xc1\xbc\x4b\xe0\xe7\xe3\x4e\x83\xdb\xcd\xe1\xeb\x72\x5c\x57\xce\x96\xc3\x8f\x80\x2f\x76\x34\x28\xd2\x7b\xc1\xf9\x41\x7d\xfc\x33\x55\x70\x8e\x06\x55\xfb\xf8\x78\x51\x85\x4e\x18\x9e\xa9\x11\xb3\x4d\x8d\x7e\x19\xaf\x4d\x33\x42\x8e\xd6\x87\x62\xff\x4b\x4a\x73\xf1\x23\xb5\x19\x40\x7a\x57\x17\x43\x54\xeb\xa2\x40\x47\xba\xf5\x43\xd8\x92\xbb\xfb\x73\xe6\x2f\x41\x38\x7e\x9d\x9c\xc0\xf8\xdb\xf3\x9a\xd3\x24\xf2\xf7\x43\x7c\x9e\xfe\x17\x7f\x94\xff\xbf\x07\x00\x00\xff\xff\xb2\xb5\x16\x0c\xc6\x15\x00\x00")

func setGoBytes() ([]byte, error) {
	return bindataRead(
		_setGo,
		"set.go",
	)
}

func setGo() (*asset, error) {
	bytes, err := setGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "set.go", size: 5574, mode: os.FileMode(420), modTime: time.Unix(1587162583, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"set.go": setGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"set.go": &bintree{setGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
