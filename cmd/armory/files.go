// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// set/set.go
// stack/stack.go
// queue/queue.go
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _setSetGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdf\x6f\xdb\x38\x12\x7e\xb6\xfe\x8a\x49\x80\x2b\xa4\xab\x4f\x09\xf2\x58\x9c\x0b\x38\xfd\x71\x28\xd0\xde\xc3\x25\xf7\x94\x0d\x16\xb4\x34\xb4\x09\x53\xa4\x4a\x52\x76\x55\x6f\xfe\xf7\xc5\x90\x92\x2c\x5b\x96\x93\xee\x76\xb1\x6f\x36\xc5\x19\xce\x7c\xf3\xf1\x9b\x61\xc9\xb2\x35\x5b\x22\x58\x74\x51\x24\x8a\x52\x1b\x07\x71\x34\xb9\xe4\x85\xbb\x8c\x92\x28\x72\x75\x89\xf0\x1f\x54\x68\x44\x06\x42\x39\x34\x9c\x65\xb8\x7b\x8a\xa2\xab\xab\x76\xfd\x0e\x1d\x88\xa2\x94\x58\xa0\x72\x16\xdc\xca\xbb\x83\x9c\x39\x06\xd6\x99\x2a\x73\x95\xc1\xfd\x0e\xcc\x61\x2b\xdc\x0a\x18\x14\xac\x4c\xe1\x3e\x6c\x27\x7f\x2b\x66\x81\x29\xd0\xa5\x13\x5a\x31\x09\x19\x2b\x59\x26\x5c\x9d\xc2\x6d\x0d\x39\x72\x56\x49\x37\x05\xb7\x12\x96\x3e\x81\xb0\xfe\x1c\xa7\xe1\x3b\x1a\x9d\xc2\x1d\x3a\x27\xd4\x12\x58\x74\x75\x55\x6a\x2b\x9c\xd8\xa0\xdf\xb8\x15\x92\x9c\x55\x16\xc1\x0a\x89\xca\x01\x67\x42\x56\x06\x2d\x6c\x57\xa8\x70\x83\x06\x9c\xa9\xc9\xd6\x69\x60\x79\x0e\xd8\x25\xa3\xbd\x3b\xe0\x95\x94\x74\x5a\x7a\x80\x08\x65\x1e\x32\x84\x5d\x34\xd9\x30\x69\x29\xa7\x87\xe6\xeb\xe3\x42\x6b\x19\x4d\x28\x02\x82\x2e\x0a\xa0\xfd\x17\xb7\x3d\xeb\xcc\x20\x73\x68\x81\x81\xc2\xad\x4f\x47\xf3\x0e\xef\x0d\x93\x15\xda\x34\xe2\x95\xca\x0e\xed\x62\x7f\x56\x9a\xa6\xcd\x52\x02\xff\xec\x39\xdd\x45\x13\x0b\x6f\x66\xbd\x28\x77\xb4\xff\xcd\x20\xb8\xdd\xd3\x53\x34\xe1\xda\xc0\xaf\x53\xd8\x90\x85\x61\x6a\x89\xe0\x9d\xef\xa2\xc9\xc4\xa6\xf4\xf3\x61\xf3\x08\x33\x70\xa6\xc2\x68\xf2\x14\x4d\x0c\xba\xca\x28\x78\x65\x29\x21\x1f\x5a\x6c\xfb\xc7\x27\x70\xe7\x8c\x50\xcb\x38\x21\x6c\x08\xd4\x5d\x67\xc4\x0b\x97\xde\x95\x46\x28\xc7\xe3\xcb\x7f\x6c\x2e\xa7\x60\xd3\x0f\xaa\x2a\xd0\x30\x87\x71\x92\x34\x18\xbd\xd3\xca\x31\xa1\x2c\x64\x2b\xcc\xd6\x16\x04\xf7\xac\x2a\x8d\xde\x88\x1c\xf3\x00\x0c\xd5\x5f\xa8\x96\x6e\xe9\xe9\x50\x5a\x4f\x04\x18\x74\x60\x51\xee\xbd\xa8\xda\x34\x99\x7c\x6c\x02\xf8\x64\xef\xaa\x05\x55\xe3\x30\x00\x5a\x11\x54\x2c\x1b\xbe\x6a\x0e\x0b\x10\x53\x9c\x02\x71\xa8\x6e\x69\x43\xeb\xed\x76\x4b\xee\x88\xb0\x21\x10\xcc\x29\xe6\xc5\x48\xb4\xed\xb1\xf1\x02\xfa\xcb\x6d\xb8\x82\x83\x44\x15\x87\x70\x13\x78\xeb\xff\x2d\x9a\x7f\x54\xaf\x16\x65\x26\xad\xaf\x55\x28\xee\x7a\x5f\xd9\x60\xea\xf7\x0a\x0e\x17\xc1\xf6\x61\xfd\xe8\x57\x8e\xcc\xa9\xd6\xe4\xa2\x59\xf5\xf5\x6f\xd1\xf9\x50\x94\xae\x6e\xc1\xe9\x65\x9b\x6b\xb4\xa0\xb4\x6b\xd3\x05\xa6\x3a\x54\xec\x68\xd2\xde\x5b\x3c\x28\x4b\x3f\xd7\xd9\x0c\xae\x9b\xd3\x3f\xa3\x82\xb0\x23\x68\x8d\xaa\x8a\x05\x1a\x8a\xa2\xbb\xb5\xcf\xd2\xe2\x33\xaa\x38\xa1\x4b\x79\xfa\xb8\x96\x86\xac\x3c\x38\xa9\xd5\xa3\x5e\xc6\x63\xb4\x63\xe5\xc0\xbf\x4d\x33\x56\x36\x9e\xef\xd0\x91\x73\x8b\x6e\xdc\x33\x7c\xe2\x5e\x16\x96\xcc\x0b\x19\x89\xef\x12\x0d\x71\xa9\x64\xd6\x62\x4e\x4a\x88\x8a\xbc\x1d\x78\xd8\xab\xe2\x75\x0a\xf3\x03\xcf\xd7\x20\x54\x2e\x32\x2f\x38\x4a\xef\xe5\x75\xe4\x16\xfb\x18\x63\x2f\xfb\x03\x7d\x11\x1c\x32\xf8\x37\x5c\x7b\xe2\x64\x40\xd5\xf1\x64\xf1\x49\xc2\x0c\xb2\x7d\xda\x4d\xca\xdd\x35\xef\x20\x65\x60\xa5\xc8\xb0\xcd\xf9\x44\xf5\xc0\xad\x98\x83\x8c\x29\x58\x20\x54\x36\x5c\x9e\xa0\xc7\xda\x90\xfc\x35\xb4\x96\x5a\x97\x29\xbc\xc7\x12\x55\x4e\x82\xa3\x15\x6c\xc9\x92\xdc\xf8\x36\x24\x2c\x2c\x90\xbe\x78\x27\x5c\x9b\x29\x31\xd4\x8a\x1c\x0d\x79\xab\xac\xd7\xfe\x15\xc2\x17\x56\x4e\xe1\xa3\x90\x0e\xcd\x14\x98\xca\xe1\xa3\x96\x39\x14\xe8\x56\x3a\xa7\xc8\xac\x43\x96\x03\xf3\x55\xab\x81\x65\x8e\xce\x72\xfb\x16\x26\x9c\x45\xc9\x47\x10\xed\x29\x1d\x3c\x3c\xb6\x2a\xbf\x8b\x26\x6b\xac\xbd\x60\x17\x6c\x8d\x71\xf7\x65\xda\xa7\x64\x12\x4d\x04\x6d\xb9\x3e\x77\xa7\xc9\xcf\x83\x20\xb5\x5e\xd3\x0d\x7f\xfd\xba\x2f\xd8\xf4\xb1\xa9\xc5\x3c\xcf\xa9\xcd\xd9\x81\xaa\x12\x6d\xfa\xfc\x6b\xeb\xe0\x3b\xb3\x34\xc8\xf2\x1a\x0c\xb2\x6c\x85\x39\xf9\x69\x19\x14\xa8\xe8\x77\xb3\x3c\x17\xd4\xbe\x9b\x4e\x2b\x6b\xdf\x6b\xc7\xee\xfe\x3c\xcf\x0f\x95\x79\x48\xb3\xc0\xa8\xb7\x70\x0d\xaf\x5e\x1d\x4b\x42\xf8\xd6\x53\x3e\xdb\xb2\xb0\x13\xf4\xae\x73\x1d\xd1\xf1\x7f\x58\xe8\x0d\x42\x8e\x12\xe9\x3a\x0c\xdb\x8b\x05\x6e\x74\x31\x40\xa3\x6b\x3d\xa4\x72\x81\xa9\xe4\xce\xa2\xeb\x40\xa0\xbe\xe4\x3b\xba\xfe\x97\x2e\x47\x12\x0f\xc7\x9f\xcd\x3d\x84\xd6\xa4\x3b\xa5\x83\x93\x41\x16\xef\x24\x32\x03\xc6\x3b\xa3\x0a\xc9\xfd\x2d\x3a\x8c\xfe\x9e\xa2\xda\xab\xb3\x37\x6b\x64\xe3\x8c\x04\x78\xf7\xf1\x20\xb2\x71\x02\x1e\xc5\xbc\x4e\xfa\x04\xec\x94\xe0\x6b\x45\xfb\x47\x7a\x7b\xd3\x63\x91\x36\x05\x3a\x06\x45\xf3\xf3\x9d\x85\xb9\xbf\x95\xb7\xc0\x8c\xc7\x3d\x6c\x13\x1c\xe6\xc7\x8d\xf9\xb6\xd9\x78\xb4\x3c\x1f\xbb\x9b\x3e\xa8\xd8\xde\xbc\xa4\xf3\x5e\xcc\xc2\xdf\x9b\xb3\xbd\xb7\xd3\xfd\xae\xad\xdb\x9b\xb6\xb5\x7c\x61\x25\xb0\xb2\x94\xe2\x98\x7b\x14\x9c\xbf\x3f\x4e\x1f\x0d\x15\xbd\xa6\x06\xb7\x18\xc6\xd9\x3d\xfb\xa0\xa8\x2c\x89\x91\xac\xbb\xde\x5b\x29\xf1\xb5\xda\xeb\xea\x34\x98\x8b\xef\xd8\xef\xd8\x05\xa3\x3e\x4e\x75\x24\x47\x8c\x3b\x34\x3e\xb0\xba\x55\x44\x67\x98\xb2\x5c\x9b\x82\xf9\xb0\xda\xf8\x46\x60\xfc\xc2\xca\x98\xfb\x4d\x71\xc7\xeb\x31\x82\xeb\xca\x11\x89\x0e\x07\xdb\x24\x6d\xfa\x8e\xbf\xdb\xc9\x39\xb2\xe9\xca\x85\x7b\xce\xe3\x75\x72\x6a\x44\xd5\x55\x3b\x74\x07\x45\xff\x33\x88\xdf\x07\xa4\x0d\xda\x4a\xfa\x57\x86\x9f\x0e\xdb\x39\xd5\xe3\x7e\xd0\xc4\x9a\xce\xe5\xfb\x0d\x7d\xe8\x9d\x12\xfc\x74\x43\xd5\x08\x92\x21\xe4\x01\x98\xc4\xc8\x9f\x8e\xa4\xe0\x40\x18\x86\x29\xb0\x83\x75\xbd\xc7\x34\xcc\x82\x27\x70\xa5\xee\x68\x30\xaf\x32\xdc\x3f\xfc\xe8\xcd\x04\xd4\x51\x65\x2b\x97\x8b\x1a\x6c\x95\x65\x68\xad\xd8\xa0\xac\x0f\x09\xd6\x16\x22\x3c\xb3\x7a\xb5\x68\xa1\xec\xb1\x75\x81\x4b\xa1\x14\x59\xfa\x27\x24\x2d\x2f\x98\xc5\xf0\x8a\xd4\x25\x35\x57\xa1\xfd\x4c\x54\xa2\x21\xd2\x86\x91\xe1\x74\xbd\xfd\x8d\x59\x20\x30\x6b\x75\x26\xc2\x94\x45\x9a\x91\xe9\xa2\xa8\x54\x78\x3e\x86\x6a\x2d\x2b\x66\x98\x72\x88\xc0\x20\x47\x87\xa6\x10\x4a\x58\x27\xb2\x86\x0f\x63\x25\xd4\x32\x8f\x29\x3e\xe8\x3a\xfa\x61\x39\xa7\x30\xbc\x24\xbd\xb1\x60\xbc\x60\xde\xe9\x0c\xb8\xf7\x7e\xac\xb3\xb4\xd6\xd4\xe7\xff\x8a\x12\xed\xcf\xb0\x95\x5f\xf1\x90\x36\x93\x62\x87\x64\x5f\x82\x03\xa2\xfb\xcd\x5b\xdd\xe8\xcc\x5e\x81\xa9\xa1\x20\xf7\x4f\x9a\x45\xfd\x26\xba\xba\x9a\xcc\x1b\x83\x5b\x98\xc1\xee\x1b\xfc\x06\xf1\x37\x42\x7f\x9e\x80\x36\xcd\xef\xdb\xe4\xe9\x34\x56\x3e\xd2\x63\xf9\x7d\x11\xcd\xcf\xbe\x72\x4e\x91\xf9\xd4\xbb\xe8\xe6\x79\x93\x01\xf9\x3f\x29\x87\xc6\x62\xe6\x0e\x00\x16\xed\xea\xcb\x71\xf6\x83\xe3\xb1\xd9\x56\x3f\x0f\x77\x67\x74\x02\x72\xb2\x7a\x06\xf3\x2e\x81\x9f\x8f\x3b\x0d\x6e\x37\x87\xaf\xcb\x71\x5d\x39\x5b\x0e\x3f\x02\xbe\xd8\xd1\xa0\x48\xef\x05\xe7\x07\xf5\xf1\xcf\x54\xc1\x39\x1a\x54\xed\xe3\xe3\x45\x15\x3a\x61\x78\xa6\x46\xcc\x36\x35\xfa\x65\xbc\x36\xcd\x08\x39\x5a\x1f\x8a\xfd\x2f\x29\xcd\xc5\x8f\xd4\x66\x00\xe9\x5d\x5d\x0c\x51\xad\x8b\x02\x1d\xe9\xd6\x0f\x61\x4b\xee\xee\xcf\x99\xbf\x04\xe1\xf8\x75\x72\x02\xe3\x6f\xcf\x6b\x4e\x93\xc8\xdf\x0f\xf1\x79\xfa\x5f\xfc\x51\xfe\xff\x1e\x00\x00\xff\xff\x52\xec\xa2\xbd\xdd\x15\x00\x00")

func setSetGoBytes() ([]byte, error) {
	return bindataRead(
		_setSetGo,
		"set/set.go",
	)
}

func setSetGo() (*asset, error) {
	bytes, err := setSetGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "set/set.go", size: 5597, mode: os.FileMode(420), modTime: time.Unix(1587333602, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stackStackGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x8b\xdb\x3e\x10\xc5\xcf\x9e\x4f\x31\x08\xfe\x7f\xa4\x6e\x2c\xb2\x57\x6f\xdd\x43\x4b\x29\xbd\x94\x42\x0e\x85\x06\x53\x14\xaf\x9c\x8a\x38\x92\x90\x64\x97\xc5\xf8\xbb\x17\xc9\x8e\x93\x90\xe2\xa3\x35\xf3\xde\xbc\xdf\x8c\xad\xa8\x4f\xe2\x28\xd1\x07\x51\x9f\x00\xd4\xd9\x1a\x17\x90\x42\x46\x9a\x73\x20\x90\x11\x1f\x9c\xd2\x47\x4f\x80\x01\x84\x37\x2b\xf1\x8b\xd4\xd2\xa9\x1a\x95\x0e\xd2\x35\xa2\x96\xc3\x08\xd0\x0b\x87\x3f\xa5\x33\x4b\xb5\x44\xad\xda\x7b\xc5\x2e\x8e\x40\x1f\x5c\x57\x07\x1c\x20\x0b\xc6\x62\x74\x81\xac\x17\xad\xc7\x7d\x35\xf7\xc1\x08\xd0\x74\xba\xc6\x6f\xf2\xcf\xad\x94\xa6\x36\xce\xf9\xfc\xc8\xf0\xdd\x9d\xf3\x00\x99\xc7\xa2\xc4\xff\x6f\x5f\x87\x60\x6c\x81\xf9\xf3\x06\xa3\xba\xb8\x4e\x19\xc6\x11\x20\x6b\x8c\xc3\x5f\x1b\xec\xa3\xce\x09\x7d\x94\xa9\x2d\x5a\x65\x9e\x7f\xef\xfc\x6f\xda\x33\xc8\x62\xa7\x93\xa1\x73\x1a\xfd\x92\x8e\xfa\xfb\xf9\x0c\x77\x69\x55\x94\xe1\xb4\xb3\xe8\xa2\x1a\xf4\x3c\x82\xbe\xc7\x6d\x72\x9d\x6d\xc8\xbe\x22\x93\xaf\x3f\xc4\xd9\xf3\x96\xf9\xc7\x4e\xb5\xaf\xd2\x0d\x63\x2c\xf0\x1f\x4e\x05\x39\xbb\x92\x3d\x12\x36\x05\x56\x49\x11\x6d\x5f\x50\xe1\x87\x12\xb7\x2f\xa8\xf2\x7c\x4a\x7d\xaf\x6a\xce\x81\xef\xac\x53\x3a\x34\x94\xfc\xd7\x23\xd9\xa0\xe7\x11\x71\xaf\x2a\x96\xc8\x1e\xe6\x54\x71\xcc\x85\xf6\xc0\x2f\x50\x2b\xdc\x5f\xfd\xe7\xb3\x0d\x6f\x94\xe1\xc1\x98\x36\xc6\xb8\xc8\x2f\xe8\x2b\xe2\x69\xc9\xa2\xc5\xe5\xaa\xf1\x8e\x29\x23\x96\x28\xac\x95\xfa\x95\x4e\xdf\xe9\x86\x2c\x56\x83\xb1\x4f\x4f\x6b\xa6\xc6\x52\xb6\xfc\x8b\x2b\x77\x88\xff\xec\x74\x07\x3d\x2d\x35\xed\x26\xb5\x56\x37\x31\xe6\xf7\x6d\x71\xad\x04\x63\xf3\x7c\x21\xd5\x2b\x61\x3e\xb5\x52\x38\x3a\x73\xc5\x0c\x25\xe6\xcf\x8f\xe6\xc5\xb6\x5a\x23\x92\xf2\xf4\x80\xd4\x4a\x3d\xaf\x86\x61\x59\xfe\x9b\xec\x7a\x8b\x5b\xb4\x11\xfe\x06\x00\x00\xff\xff\x2b\xf8\xb7\x90\xf9\x03\x00\x00")

func stackStackGoBytes() ([]byte, error) {
	return bindataRead(
		_stackStackGo,
		"stack/stack.go",
	)
}

func stackStackGo() (*asset, error) {
	bytes, err := stackStackGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stack/stack.go", size: 1017, mode: os.FileMode(420), modTime: time.Unix(1587333602, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _queueQueueGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xcf\x8b\xd4\x30\x14\xc7\xcf\x79\x7f\xc5\x23\xa0\x24\x32\x86\xdd\xeb\x40\x2f\x82\x88\x17\x59\xd9\x83\xe0\x50\xa4\xd3\x7d\x1d\x83\x9d\x24\x4d\xd2\xca\x50\xfa\xbf\x4b\xda\xd8\x99\xd1\xa5\xd7\x97\xbc\xcf\xf7\x47\xe2\xaa\xfa\x57\x75\x22\xec\x7a\xea\x09\x40\x9f\x9d\xf5\x11\x05\x30\xde\x9c\x23\x07\xc6\x43\xf4\xda\x9c\x02\x07\x09\x10\x2f\x8e\xf0\x13\x19\xf2\xba\x46\x6d\x22\xf9\xa6\xaa\x69\x9c\x00\x86\xca\xe3\x77\xf2\x76\x3d\x2d\xd0\xe8\xf6\x7e\xe3\x6b\x92\xc0\x10\x7d\x5f\x47\x1c\x81\x0d\x55\x1b\xf0\x50\xe6\x53\x98\x00\x9a\xde\xd4\xf8\x85\x7e\xdf\x2e\x88\xf9\x9a\x52\x2a\x0f\x25\xbe\xbb\xe3\x8d\xc0\x3a\xdc\x17\xf8\xf6\x76\x3a\xa6\xa5\xfd\x15\x3e\x4e\x13\x00\x6b\xac\xc7\x1f\x3b\x1c\xd2\x75\x5f\x99\x13\xe1\xcc\x1e\x81\xb1\x4e\x3d\xf5\xe1\xa7\x18\x24\xb0\x74\xd3\x53\xec\xbd\xc1\x6e\x35\x25\xba\x7b\x59\x89\xcf\x73\x2f\x42\xe2\x52\x50\xa2\xe8\x06\x3b\xf5\x39\x7c\x3c\xbb\x78\x11\x72\xe6\x66\x10\x3f\x94\x7c\x21\x87\x63\x52\xcf\xa5\xaa\x0f\xbd\x6e\x5f\xc8\x8f\x53\x3a\x50\xdf\xbc\x8e\x94\xb9\xfc\x80\x5c\xbe\x66\xb9\x53\xab\xe9\x7f\x56\x9a\x73\x54\xcf\xce\x6b\x13\x1b\xc1\xdf\x0c\xc8\x77\x38\xc8\x39\xd0\x7f\xf0\x32\xb1\xb3\xb7\x70\x54\x7f\xb3\x6c\xc4\xbd\xc6\x3a\x5a\xdb\x26\xf9\xbc\xde\x92\x11\x8b\x27\x89\x45\x81\x0f\x1b\x8c\xa5\xe2\xaa\xc5\xf5\x29\xd3\xe3\x2d\x79\x0a\xac\x9c\x23\xf3\x92\x59\xbb\xf4\x34\x5b\x7e\x9e\xac\x13\x72\xfd\x6d\x9b\xe5\xa7\x8f\x38\x77\xdf\x78\x6b\x62\x6a\x72\xd1\x38\x3c\x94\xc0\x6a\xeb\x2e\xab\x66\x9e\x3f\xee\x4b\x79\x63\x2c\x4f\xf7\x37\x49\xdf\x3f\x96\xd7\x5f\x32\x63\x61\x82\x3f\x01\x00\x00\xff\xff\x77\xd5\xfc\x14\x4b\x03\x00\x00")

func queueQueueGoBytes() ([]byte, error) {
	return bindataRead(
		_queueQueueGo,
		"queue/queue.go",
	)
}

func queueQueueGo() (*asset, error) {
	bytes, err := queueQueueGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "queue/queue.go", size: 843, mode: os.FileMode(420), modTime: time.Unix(1587336267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"set/set.go":     setSetGo,
	"stack/stack.go": stackStackGo,
	"queue/queue.go": queueQueueGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"queue": &bintree{nil, map[string]*bintree{
		"queue.go": &bintree{queueQueueGo, map[string]*bintree{}},
	}},
	"set": &bintree{nil, map[string]*bintree{
		"set.go": &bintree{setSetGo, map[string]*bintree{}},
	}},
	"stack": &bintree{nil, map[string]*bintree{
		"stack.go": &bintree{stackStackGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
