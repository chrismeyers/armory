// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// ll/dll.go
// set/set.go
// stack/stack.go
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _llDllGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5d\x6f\xdb\x36\x17\xbe\x96\x7e\xc5\x79\x05\xbc\x85\xd4\x24\x6a\x7b\x5b\xd4\x05\xba\xa5\x28\x06\x04\xc5\xb0\x6e\xd8\x45\x10\x0c\xb4\x75\x64\x13\xa1\x48\x81\xa4\x9d\x06\x6e\xfe\xfb\x70\x0e\x49\x99\x4a\xec\xa6\xc0\xb0\xdd\x99\x1f\x7a\xce\x73\xbe\x9e\x43\x8f\x62\x75\x2b\xd6\x08\x4a\x95\xa5\x1c\x46\x63\x3d\xd4\x65\x51\xf5\x83\xaf\xca\xa2\x72\xde\x4a\xbd\x76\x55\xd9\x94\xe5\xab\x57\xf0\x09\x35\x5a\xb9\x02\x8b\xa3\x45\x87\xda\x3b\x10\xb0\x8e\x9b\x3b\xa1\xb6\xd8\x96\xfe\x7e\xc4\xe9\xa2\xd4\x1e\x6d\x2f\x56\xb8\x7f\xc8\x01\x2e\xaf\xae\x40\xe6\xdf\x76\x66\xbb\x54\xf7\xa0\xa4\xbe\xc5\x0e\x94\x74\x1e\xee\xa4\xdf\x80\xc5\x1e\x2d\xea\x15\x3a\xf0\x06\xfc\x06\x61\x83\xa2\x03\xa1\x3b\x42\xa3\xb5\x17\x52\xcd\x8d\x12\xb8\xf3\x76\xbb\xf2\xb0\x2f\x0b\xbe\xff\xb2\xfb\x6c\x3a\x2c\x0b\xba\x3c\x2d\x14\x6a\x20\x82\x65\xa0\xc6\xbb\x81\x95\xe6\x5f\x1a\x04\x5c\x5e\x5d\x45\xf0\x70\x7c\xc0\xed\x84\x17\xc9\x62\x59\x68\xfc\xea\x27\xe0\xd1\xe2\x2e\x2d\x02\xf6\x67\xbc\xcb\xc8\xad\x2c\x0a\x8f\x6c\x08\xef\x8e\xb9\xde\x5b\x33\xb0\x73\xa3\x35\x3b\xd9\x61\x07\x64\xad\x2d\xfb\xad\x5e\xcd\xb1\x6a\xa6\xd1\xb6\x6d\xdc\x6a\xe0\x65\x66\x68\x5f\x16\x0a\xde\x2e\xe0\xc5\x61\x8f\xf2\x50\xf4\xc6\xc2\x5f\xe7\xd0\xd1\x99\x15\x7a\x8d\x8c\x4f\xd7\x0b\xd5\x7e\x18\x47\xd4\x5d\xdd\x35\x65\x41\x77\x2d\xfa\xad\xd5\xa0\xc8\x13\xb6\xaf\xf1\xee\x92\x5c\xab\xf3\x08\x34\xd1\x5f\xc2\x88\x5f\xbc\xe0\x8d\x3d\xdd\x7a\xcb\xf8\x0f\x13\x44\xad\x72\x9a\x0d\x7c\xe1\x2a\xab\x1b\x08\xe5\x46\x20\xb2\x07\xd5\x52\x86\x16\x0b\x78\xcd\xcc\x22\x6c\x75\x7d\x53\x05\x66\x6e\x49\xfc\x63\x85\xb6\x3f\x6d\xa5\xea\xd0\xee\x1f\xe8\xa0\xfd\xd3\x4a\x8f\x11\xb6\xba\xae\x9a\x27\x9b\xfd\xe0\xdb\x2f\xa3\x95\xda\xf7\x75\xf5\xff\x5d\x75\x0e\xaa\xa5\x52\x69\x89\x69\xd3\x94\x85\x26\xf0\xb8\x47\xd9\x0d\x51\xd3\xf0\xbf\x05\x68\xa9\x98\xd1\xf7\x20\x81\x31\xf5\x04\x57\x68\x58\x80\x8e\x48\x47\x38\xde\x54\xcd\x21\xd8\x6e\xd9\xa6\x90\xc4\x02\xba\x42\x0d\xe1\xd0\x71\x61\x28\xd4\x6b\xbf\x01\xd3\x87\x95\x74\xbe\x3d\x1e\xda\x2b\xd4\x75\x43\x55\x9e\x65\x86\x03\x1b\x81\x7f\x71\x1f\x87\xd1\xdf\x4f\xe0\xf2\x80\x48\xbd\x80\x74\xd8\xc2\x87\x59\x79\xa6\x7d\xb8\xdb\xa0\xa6\xeb\x16\x41\x58\x24\x38\x6d\xb8\x79\x1c\x75\x8f\x3c\xc5\x29\xda\xac\x1b\x58\x1a\xa3\x66\xc4\x02\x5d\xca\x79\xe4\x77\x89\x38\xfe\x6c\xc6\xfb\x47\x4d\x93\x15\x79\x6c\x16\xe9\xf2\x4d\x16\x0f\x6d\xe6\xfa\x91\x24\xc3\x58\xb9\x96\x5a\xa8\x13\xf4\x92\xc9\xfa\x49\x33\x69\xee\xa6\x79\x03\xce\x4b\xe5\x48\x95\xe8\xa9\xa5\x62\x35\x3c\x2d\x86\xe8\xbe\x56\xd1\xe9\x8f\x7a\x3b\xa0\x15\x1e\xa7\xb4\x08\x70\x4a\xae\x30\x25\x9c\xa5\x96\x83\xfc\x4c\xfa\x27\xa4\xba\x81\xeb\x9b\xa4\xca\xfb\xb2\x70\xc4\x79\x10\xb7\x58\x4f\xdb\xe7\x29\xfe\x4d\x59\x48\x3a\x7e\xfd\x9c\x6b\xee\x5a\xde\xb0\x27\xe4\x57\x59\x14\xf2\xec\xec\xa4\x73\x2e\xfa\x16\x62\x01\xa2\xeb\x52\x2e\x59\x6d\xa3\xba\xd3\xd1\xf3\x45\x9d\x24\x6a\x26\x40\x24\x76\x54\xd8\x67\x67\x65\xe4\x3d\x53\xaa\x26\x6a\x0a\xcf\x83\xc5\xc1\x87\xb4\x03\x9a\x17\x3c\x21\xc2\x22\x10\x0f\x5a\x13\x0e\xd8\xa9\x70\xaa\x5b\x56\x79\x0a\x0e\x9d\x94\xf9\xa7\xc1\xd1\x5f\x2d\x7e\xcf\xd3\xde\x1a\xed\x7f\xc0\xd7\x08\xf3\xdf\x3a\xcb\xaa\x17\x1d\x64\x67\xa3\xe3\xa9\x12\x32\x9c\xe0\xec\x1a\x3d\xcb\xbf\x45\x6f\x25\xee\x30\xa8\x14\xfb\xcb\xad\x38\x1b\x66\x52\x77\xf8\xb5\x85\xdf\x37\x08\x42\xad\x8d\x95\x7e\x33\x80\x17\xb7\xe8\x08\x4a\x74\x3b\xa1\x3d\x3d\x49\x62\x70\xd2\xc4\xe7\x51\x0f\xa3\xe1\x37\x05\xbf\x07\x9c\x17\xd6\xf3\x1d\x87\xc2\xae\x36\x20\x78\x45\x28\x4b\x5c\x4b\xad\x69\x98\x18\xfb\xb8\xaa\xa0\xe3\x90\xf2\x61\xe8\xa0\xc0\xe8\x78\x02\xa2\x6b\x35\xdf\x21\x25\xcd\x67\xdd\x4e\x58\x18\xa6\xc1\x4f\x7a\xda\xc3\x12\x7b\x63\x91\x71\x07\xd9\xdd\x89\xfb\xc0\xf9\x3c\xd2\x9d\x86\x7b\x08\x65\x1a\x74\x17\x01\xff\x7d\xe0\xc2\xd9\x4a\x4d\x58\x0c\x59\xe8\xb9\x0b\x25\xbc\xcb\xee\xf1\xf9\x10\x3b\x2e\x75\xe1\x43\x59\x3c\x00\x2a\x87\x07\xa8\x30\x50\x2f\xe0\xcd\x04\x19\x4a\x37\x42\xbe\x7f\x0a\x49\x25\xc0\x90\x17\x17\x11\x72\xea\xe7\xa1\x4c\x2f\x3a\x3f\x9b\x4c\x5c\xa7\x21\x0f\x47\x32\x2e\x1d\x0c\xe8\x37\xa6\x83\x51\x68\xb9\xe2\x79\x23\x34\x98\x2d\xb5\x02\xc1\x85\xe7\x48\x8c\xb5\x9b\x10\x4e\xe4\xe6\x13\xfa\x3c\x2f\x99\xbe\xc9\x3e\x82\xbc\x83\xd7\xf0\xed\x1b\xa4\xe8\x86\x58\xbf\x61\x27\x99\x42\x5d\x49\xbd\x13\x4a\x46\x92\xd5\xa3\x67\x4f\x3b\x4b\x7f\x13\x94\x2e\x8e\x4e\xed\xd0\xfa\x0f\xbd\x47\xfb\x68\x3a\xa5\xf7\xe3\x54\x70\x82\x2f\x9d\x68\x82\x30\x39\xa5\xa3\x79\x45\xd5\xe2\x0d\x69\x46\x7a\x86\x9e\x92\x8b\xd4\x57\x53\x44\x5b\xf8\xc3\x61\x2e\x3c\x84\xb3\xda\x50\x37\x86\x6b\x4b\xdc\x88\x9d\x34\xf6\xd9\x3c\x84\x24\x30\xa9\x1f\xcc\x43\x16\x8a\x43\x3e\xce\xe1\x89\x66\xfd\xd3\xac\x4c\xdf\x2f\x16\xb3\x6f\x0e\xaf\xd6\x38\x60\x73\x39\x3b\x2a\x8f\x43\x68\x88\x79\x76\x67\xa2\x9a\xf4\x6f\xc8\xf4\x2f\x35\xd9\x30\x9b\x04\xf4\xfb\xa0\x96\xa1\x38\x7e\xc3\xc1\xec\x10\x3a\x54\xe8\x73\x35\x3c\xda\x19\xac\x6e\xd3\x0b\xcc\xbb\xf8\x57\x8a\xf3\x44\x60\xcf\xa5\xea\x87\xf3\x14\x58\xfd\x4b\x2d\xa3\xbf\x13\xd2\x8b\x8b\x90\xbd\x14\xd5\x63\x23\x29\x09\xd8\x61\x72\x65\x4f\x8d\xc7\x43\x89\x75\x6b\xae\x71\x01\x7b\xca\xcc\xf4\x02\x89\x86\xc3\x7e\x6e\x38\x8d\xbf\x24\x73\x6c\x98\x37\xe7\x86\x67\xa3\xff\xa8\xe1\x59\x05\x44\xb8\x4c\x45\x74\x92\x8d\xbf\x03\x00\x00\xff\xff\x38\x13\x63\x6d\x6d\x0f\x00\x00")

func llDllGoBytes() ([]byte, error) {
	return bindataRead(
		_llDllGo,
		"ll/dll.go",
	)
}

func llDllGo() (*asset, error) {
	bytes, err := llDllGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ll/dll.go", size: 3949, mode: os.FileMode(420), modTime: time.Unix(1587527705, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _setSetGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xdf\x6f\xdb\x38\x12\x7e\xb6\xfe\x8a\x49\x80\x2b\xa4\xab\x4f\x09\xf2\x58\x9c\x0b\x38\xfd\x71\x28\xd0\xde\xc3\x25\xf7\x94\x0d\x16\xb4\x34\xb4\x09\x53\xa4\x4a\x52\x76\x55\x6f\xfe\xf7\xc5\x90\x92\x2c\x5b\x96\x93\xee\x76\xb1\x6f\x36\xc5\x19\xce\x7c\xf3\xf1\x9b\x61\xc9\xb2\x35\x5b\x22\x58\x74\x51\x24\x8a\x52\x1b\x07\x71\x34\xb9\xe4\x85\xbb\x8c\x92\x28\x72\x75\x89\xf0\x1f\x54\x68\x44\x06\x42\x39\x34\x9c\x65\xb8\x7b\x8a\xa2\xab\xab\x76\xfd\x0e\x1d\x88\xa2\x94\x58\xa0\x72\x16\xdc\xca\xbb\x83\x9c\x39\x06\xd6\x99\x2a\x73\x95\xc1\xfd\x0e\xcc\x61\x2b\xdc\x0a\x18\x14\xac\x4c\xe1\x3e\x6c\x27\x7f\x2b\x66\x81\x29\xd0\xa5\x13\x5a\x31\x09\x19\x2b\x59\x26\x5c\x9d\xc2\x6d\x0d\x39\x72\x56\x49\x37\x05\xb7\x12\x96\x3e\x81\xb0\xfe\x1c\xa7\xe1\x3b\x1a\x9d\xc2\x1d\x3a\x27\xd4\x12\x58\x74\x75\x55\x6a\x2b\x9c\xd8\xa0\xdf\xb8\x15\x92\x9c\x55\x16\xc1\x0a\x89\xca\x01\x67\x42\x56\x06\x2d\x6c\x57\xa8\x70\x83\x06\x9c\xa9\xc9\xd6\x69\x60\x79\x0e\xd8\x25\xa3\xbd\x3b\xe0\x95\x94\x74\x5a\x7a\x80\x08\x65\x1e\x32\x84\x5d\x34\xd9\x30\x69\x29\xa7\x87\xe6\xeb\xe3\x42\x6b\x19\x4d\x28\x02\x82\x2e\x0a\xa0\xfd\x17\xb7\x3d\xeb\xcc\x20\x73\x68\x81\x81\xc2\xad\x4f\x47\xf3\x0e\xef\x0d\x93\x15\xda\x34\xe2\x95\xca\x0e\xed\x62\x7f\x56\x9a\xa6\xcd\x52\x02\xff\xec\x39\xdd\x45\x13\x0b\x6f\x66\xbd\x28\x77\xb4\xff\xcd\x20\xb8\xdd\xd3\x53\x34\xe1\xda\xc0\xaf\x53\xd8\x90\x85\x61\x6a\x89\xe0\x9d\xef\xa2\xc9\xc4\xa6\xf4\xf3\x61\xf3\x08\x33\x70\xa6\xc2\x68\xf2\x14\x4d\x0c\xba\xca\x28\x78\x65\x29\x21\x1f\x5a\x6c\xfb\xc7\x27\x70\xe7\x8c\x50\xcb\x38\x21\x6c\x08\xd4\x5d\x67\xc4\x0b\x97\xde\x95\x46\x28\xc7\xe3\xcb\x7f\x6c\x2e\xa7\x60\xd3\x0f\xaa\x2a\xd0\x30\x87\x71\x92\x34\x18\xbd\xd3\xca\x31\xa1\x2c\x64\x2b\xcc\xd6\x16\x04\xf7\xac\x2a\x8d\xde\x88\x1c\xf3\x00\x0c\xd5\x5f\xa8\x96\x6e\xe9\xe9\x50\x5a\x4f\x04\x18\x74\x60\x51\xee\xbd\xa8\xda\x34\x99\x7c\x6c\x02\xf8\x64\xef\xaa\x05\x55\xe3\x30\x00\x5a\x11\x54\x2c\x1b\xbe\x6a\x0e\x0b\x10\x53\x9c\x02\x71\xa8\x6e\x69\x43\xeb\xed\x76\x4b\xee\x88\xb0\x21\x10\xcc\x29\xe6\xc5\x48\xb4\xed\xb1\xf1\x02\xfa\xcb\x6d\xb8\x82\x83\x44\x15\x87\x70\x13\x78\xeb\xff\x2d\x9a\x7f\x54\xaf\x16\x65\x26\xad\xaf\x55\x28\xee\x7a\x5f\xd9\x60\xea\xf7\x0a\x0e\x17\xc1\xf6\x61\xfd\xe8\x57\x8e\xcc\xa9\xd6\xe4\xa2\x59\xf5\xf5\x6f\xd1\xf9\x50\x94\xae\x6e\xc1\xe9\x65\x9b\x6b\xb4\xa0\xb4\x6b\xd3\x05\xa6\x3a\x54\xec\x68\xd2\xde\x5b\x3c\x28\x4b\x3f\xd7\xd9\x0c\xae\x9b\xd3\x3f\xa3\x82\xb0\x23\x68\x8d\xaa\x8a\x05\x1a\x8a\xa2\xbb\xb5\xcf\xd2\xe2\x33\xaa\x38\xa1\x4b\x79\xfa\xb8\x96\x86\xac\x3c\x38\xa9\xd5\xa3\x5e\xc6\x63\xb4\x63\xe5\xc0\xbf\x4d\x33\x56\x36\x9e\xef\xd0\x91\x73\x8b\x6e\xdc\x33\x7c\xe2\x5e\x16\x96\xcc\x0b\x19\x89\xef\x12\x0d\x71\xa9\x64\xd6\x62\x4e\x4a\x88\x8a\xbc\x1d\x78\xd8\xab\xe2\x75\x0a\xf3\x03\xcf\xd7\x20\x54\x2e\x32\x2f\x38\x4a\xef\xe5\x75\xe4\x16\xfb\x18\x63\x2f\xfb\x03\x7d\x11\x1c\x32\xf8\x37\x5c\x7b\xe2\x64\x40\xd5\xf1\x64\xf1\x49\xc2\x0c\xb2\x7d\xda\x4d\xca\xdd\x35\xef\x20\x65\x60\xa5\xc8\xb0\xcd\xf9\x44\xf5\xc0\xad\x98\x83\x8c\x29\x58\x20\x54\x36\x5c\x9e\xa0\xc7\xda\x90\xfc\x35\xb4\x96\x5a\x97\x29\xbc\xc7\x12\x55\x4e\x82\xa3\x15\x6c\xc9\x92\xdc\xf8\x36\x24\x2c\x2c\x90\xbe\x78\x27\x5c\x9b\x29\x31\xd4\x8a\x1c\x0d\x79\xab\xac\xd7\xfe\x15\xc2\x17\x56\x4e\xe1\xa3\x90\x0e\xcd\x14\x98\xca\xe1\xa3\x96\x39\x14\xe8\x56\x3a\xa7\xc8\xac\x43\x96\x03\xf3\x55\xab\x81\x65\x8e\xce\x72\xfb\x16\x26\x9c\x45\xc9\x47\x10\xed\x29\x1d\x3c\x3c\xb6\x2a\xbf\x8b\x26\x6b\xac\xbd\x60\x17\x6c\x8d\x71\xf7\x65\xda\xa7\x64\x12\x4d\x04\x6d\xb9\x3e\x77\xa7\xc9\xcf\x83\x20\xb5\x5e\xd3\x0d\x7f\xfd\xba\x2f\xd8\xf4\xb1\xa9\xc5\x3c\xcf\xa9\xcd\xd9\x81\xaa\x12\x6d\xfa\xfc\x6b\xeb\xe0\x3b\xb3\x34\xc8\xf2\x1a\x0c\xb2\x6c\x85\x39\xf9\x69\x19\x14\xa8\xe8\x77\xb3\x3c\x17\xd4\xbe\x9b\x4e\x2b\x6b\xdf\x6b\xc7\xee\xfe\x3c\xcf\x0f\x95\x79\x48\xb3\xc0\xa8\xb7\x70\x0d\xaf\x5e\x1d\x4b\x42\xf8\xd6\x53\x3e\xdb\xb2\xb0\x13\xf4\xae\x73\x1d\xd1\xf1\x7f\x58\xe8\x0d\x42\x8e\x12\xe9\x3a\x0c\xdb\x8b\x05\x6e\x74\x31\x40\xa3\x6b\x3d\xa4\x72\x81\xa9\xe4\xce\xa2\xeb\x40\xa0\xbe\xe4\x3b\xba\xfe\x97\x2e\x47\x12\x0f\xc7\x9f\xcd\x3d\x84\xd6\xa4\x3b\xa5\x83\x93\x41\x16\xef\x24\x32\x03\xc6\x3b\xa3\x0a\xc9\xfd\x2d\x3a\x8c\xfe\x9e\xa2\xda\xab\xb3\x37\x6b\x64\xe3\x8c\x04\x78\xf7\xf1\x20\xb2\x71\x02\x1e\xc5\xbc\x4e\xfa\x04\xec\x94\xe0\x6b\x45\xfb\x47\x7a\x7b\xd3\x63\x91\x36\x05\x3a\x06\x45\xf3\xf3\x9d\x85\xb9\xbf\x95\xb7\xc0\x8c\xc7\x3d\x6c\x13\x1c\xe6\xc7\x8d\xf9\xb6\xd9\x78\xb4\x3c\x1f\xbb\x9b\x3e\xa8\xd8\xde\xbc\xa4\xf3\x5e\xcc\xc2\xdf\x9b\xb3\xbd\xb7\xd3\xfd\xae\xad\xdb\x9b\xb6\xb5\x7c\x61\x25\xb0\xb2\x94\xe2\x98\x7b\x14\x9c\xbf\x3f\x4e\x1f\x0d\x15\xbd\xa6\x06\xb7\x18\xc6\xd9\x3d\xfb\xa0\xa8\x2c\x89\x91\xac\xbb\xde\x5b\x29\xf1\xb5\xda\xeb\xea\x34\x98\x8b\xef\xd8\xef\xd8\x05\xa3\x3e\x4e\x75\x24\x47\x8c\x3b\x34\x3e\xb0\xba\x55\x44\x67\x98\xb2\x5c\x9b\x82\xf9\xb0\xda\xf8\x46\x60\xfc\xc2\xca\x98\xfb\x4d\x71\xc7\xeb\x31\x82\xeb\xca\x11\x89\x0e\x07\xdb\x24\x6d\xfa\x8e\xbf\xdb\xc9\x39\xb2\xe9\xca\x85\x7b\xce\xe3\x75\x72\x6a\x44\xd5\x55\x3b\x74\x07\x45\xff\x33\x88\xdf\x07\xa4\x0d\xda\x4a\xfa\x57\x86\x9f\x0e\xdb\x39\xd5\xe3\x7e\xd0\xc4\x9a\xce\xe5\xfb\x0d\x7d\xe8\x9d\x12\xfc\x74\x43\xd5\x08\x92\x21\xe4\x01\x98\xc4\xc8\x9f\x8e\xa4\xe0\x40\x18\x86\x29\xb0\x83\x75\xbd\xc7\x34\xcc\x82\x27\x70\xa5\xee\x68\x30\xaf\x32\xdc\x3f\xfc\xe8\xcd\x04\xd4\x51\x65\x2b\x97\x8b\x1a\x6c\x95\x65\x68\xad\xd8\xa0\xac\x0f\x09\xd6\x16\x22\x3c\xb3\x7a\xb5\x68\xa1\xec\xb1\x75\x81\x4b\xa1\x14\x59\xfa\x27\x24\x2d\x2f\x98\xc5\xf0\x8a\xd4\x25\x35\x57\xa1\xfd\x4c\x54\xa2\x21\xd2\x86\x91\xe1\x74\xbd\xfd\x8d\x59\x20\x30\x6b\x75\x26\xc2\x94\x45\x9a\x91\xe9\xa2\xa8\x54\x78\x3e\x86\x6a\x2d\x2b\x66\x98\x72\x88\xc0\x20\x47\x87\xa6\x10\x4a\x58\x27\xb2\x86\x0f\x63\x25\xd4\x32\x8f\x29\x3e\xe8\x3a\xfa\x61\x39\xa7\x30\xbc\x24\xbd\xb1\x60\xbc\x60\xde\xe9\x0c\xb8\xf7\x7e\xac\xb3\xb4\xd6\xd4\xe7\xff\x8a\x12\xed\xcf\xb0\x95\x5f\xf1\x90\x36\x93\x62\x87\x64\x5f\x82\x03\xa2\xfb\xcd\x5b\xdd\xe8\xcc\x5e\x81\xa9\xa1\x20\xf7\x4f\x9a\x45\xfd\x26\xba\xba\x9a\xcc\x1b\x83\x5b\x98\xc1\xee\x1b\xfc\x06\xf1\x37\x42\x7f\x9e\x80\x36\xcd\xef\xdb\xe4\xe9\x34\x56\x3e\xd2\x63\xf9\x7d\x11\xcd\xcf\xbe\x72\x4e\x91\xf9\xd4\xbb\xe8\xe6\x79\x93\x01\xf9\x3f\x29\x87\xc6\x62\xe6\x0e\x00\x16\xed\xea\xcb\x71\xf6\x83\xe3\xb1\xd9\x56\x3f\x0f\x77\x67\x74\x02\x72\xb2\x7a\x06\xf3\x2e\x81\x9f\x8f\x3b\x0d\x6e\x37\x87\xaf\xcb\x71\x5d\x39\x5b\x0e\x3f\x02\xbe\xd8\xd1\xa0\x48\xef\x05\xe7\x07\xf5\xf1\xcf\x54\xc1\x39\x1a\x54\xed\xe3\xe3\x45\x15\x3a\x61\x78\xa6\x46\xcc\x36\x35\xfa\x65\xbc\x36\xcd\x08\x39\x5a\x1f\x8a\xfd\x2f\x29\xcd\xc5\x8f\xd4\x66\x00\xe9\x5d\x5d\x0c\x51\xad\x8b\x02\x1d\xe9\xd6\x0f\x61\x4b\xee\xee\xcf\x99\xbf\x04\xe1\xf8\x75\x72\x02\xe3\x6f\xcf\x6b\x4e\x93\xc8\xdf\x0f\xf1\x79\xfa\x5f\xfc\x51\xfe\xff\x1e\x00\x00\xff\xff\x52\xec\xa2\xbd\xdd\x15\x00\x00")

func setSetGoBytes() ([]byte, error) {
	return bindataRead(
		_setSetGo,
		"set/set.go",
	)
}

func setSetGo() (*asset, error) {
	bytes, err := setSetGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "set/set.go", size: 5597, mode: os.FileMode(420), modTime: time.Unix(1587319110, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stackStackGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x8b\xdb\x30\x10\x85\xcf\x9e\x5f\x31\x08\x5a\xa4\x6e\x2c\x92\xab\xb7\xee\xa1\xa5\x94\x5e\x4a\x21\x87\x42\x83\x29\x8a\x57\x4e\x45\x1c\x59\x48\xb2\xcb\x62\xfc\xdf\x8b\x64\xc7\x71\xc8\xe2\xa3\xc7\x33\xdf\xbc\xf7\x46\x46\x94\x67\x71\x92\xe8\xbc\x28\xcf\x00\xea\x62\x1a\xeb\x91\x42\x42\xaa\x8b\x27\x90\x10\xe7\xad\xd2\x27\x47\x80\x01\xf8\x57\x23\xf1\x9b\xd4\xd2\xaa\x12\x95\xf6\xd2\x56\xa2\x94\xfd\x00\xd0\x09\x8b\xbf\xa5\x6d\xe6\xbf\x39\x6a\x55\xdf\x4f\xec\xc3\x0a\x74\xde\xb6\xa5\xc7\x1e\x12\xdf\x18\x0c\x14\x48\x3a\x51\x3b\x3c\x14\x53\x1f\x0c\x00\x55\xab\x4b\xfc\x21\xff\x2d\x47\x69\x6c\xe3\x9c\x4f\x45\x86\x1f\xee\xc8\x3d\x24\x0e\xb3\x1c\xdf\x2f\xab\xbd\x6f\x4c\x86\xe9\x6e\x83\x61\x3a\xbb\x6d\xe9\x87\x01\x20\xa9\x1a\x8b\x7f\x36\xd8\x85\x39\x2b\xf4\x49\xc6\xb6\x80\x4a\x1c\xff\xd9\xba\xbf\xb4\x63\x90\x84\x4e\x2b\x7d\x6b\x35\xba\x59\x1d\x75\xf7\xfb\x19\xee\x63\x54\x94\xe1\x98\x59\xa0\xa8\x0a\x1d\x0f\x46\x3f\xe2\x36\x52\x27\x0c\x39\x14\x64\xe4\xba\x63\xd8\x3d\xa5\xcc\x3f\xb7\xaa\x7e\x91\xb6\x1f\xc2\x0f\xfe\xcb\x2a\x2f\x27\x2a\x39\x10\xf6\x50\xac\x2e\x9e\xef\x8d\x55\xda\x57\x94\xbc\xeb\xc8\x06\x1d\x0f\x06\x0e\x71\x69\xc1\xd8\xe8\x50\xc5\x15\x51\x47\x8a\xbb\x67\x54\xf8\x29\xc7\xed\x33\xaa\x34\x1d\xad\xae\x50\x71\x89\x55\x11\xf9\x86\xb8\x22\x88\xbb\x46\x74\xe4\xd7\x24\x56\xc2\xfa\xee\xbe\x5e\x8c\x7f\xa5\x0c\x8f\x4d\x53\x07\x19\xd7\xf1\x6b\x5e\x2b\xc3\xe3\x65\x44\x8d\xf3\x53\x08\xc7\x8f\x1a\x31\x47\x61\x8c\xd4\x2f\x74\xfc\x8e\x87\x0f\xc9\x05\xec\xd3\xd3\x1a\xb4\x31\x94\xcd\x0f\x78\xe5\x78\xe1\xa1\x8f\xc7\xd3\x63\xb0\x8b\xc8\x17\x32\xa6\xfa\x36\xbb\xfd\xf1\x8d\x49\xd3\xd9\xa9\x5e\x11\xf3\xa5\x96\xc2\xd2\xc9\x57\xd0\x90\x63\xba\x7b\x84\x67\xdb\x62\xcd\x91\x94\xe7\x07\x4b\xb5\xd4\x53\x34\x0c\xf3\xfc\x6d\x67\xb7\x5b\x2c\xad\x0d\xf0\x3f\x00\x00\xff\xff\x3d\x3a\x94\x14\x2e\x04\x00\x00")

func stackStackGoBytes() ([]byte, error) {
	return bindataRead(
		_stackStackGo,
		"stack/stack.go",
	)
}

func stackStackGo() (*asset, error) {
	bytes, err := stackStackGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stack/stack.go", size: 1070, mode: os.FileMode(420), modTime: time.Unix(1587488055, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ll/dll.go":      llDllGo,
	"set/set.go":     setSetGo,
	"stack/stack.go": stackStackGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ll": &bintree{nil, map[string]*bintree{
		"dll.go": &bintree{llDllGo, map[string]*bintree{}},
	}},
	"set": &bintree{nil, map[string]*bintree{
		"set.go": &bintree{setSetGo, map[string]*bintree{}},
	}},
	"stack": &bintree{nil, map[string]*bintree{
		"stack.go": &bintree{stackStackGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
